-- design.vhd
library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity semaforo is
    port ( CLR : in std_logic;
           CLK : in std_logic;
           Z   : out std_logic_vector(1 downto 0)
    	  );
end semaforo;

architecture RTL of semaforo is

  type state_type is (ST0,ST1,ST2);
  	attribute ENUM_ENCODING : string;
  	attribute ENUM_ENCODING of state_type : type is "000 001 010";
    
  	signal PS,NS : state_type;

  component RGT_5bit is
    port ( load, clear : in std_logic;
           Entrada     : in  std_logic_vector (4 downto 0);
           Saida       : out std_logic_vector (4 downto 0)
          );
  end component;
  
  --component divisor_clock is
    --port ( clk50MHz : in std_logic;
           --reset    : in std_logic;
           --clk1Hz   : out std_logic
          --);
  --end component;

  signal in_rgt     : std_logic_vector(4 downto 0);
  signal out_rgt    : std_logic_vector(4 downto 0);
  signal load_rgt   : std_logic;
  signal clock1Hz   : std_logic;
  signal clock50MHz : std_logic;  
  signal aux        : std_logic;
  signal clear_rgt  : std_logic;

  begin
    instancia : RGT_5bit port map
      ( Entrada => in_rgt,
        Load    => load_rgt,
        Saida   => out_rgt,
        clear   => clear_rgt
       );

    --timer : divisor_clock port map 
      --( clk50MHz => clock50MHz, 
        --reset    => CLR,
        --clk1Hz   => clock1Hz
       --);
     sync_proc: process(CLK,NS,CLR)
      begin
      	
      	if(rising_edge(CLK)) then
        	aux <= aux XOR '1';
        end if;
        
        if (CLR = '1') then
            PS <= ST0;
		end if;
      end process sync_proc;

      comb_proc: process(PS,aux)
      begin
          Z <= "00";
          load_rgt  <= '0';
          clear_rgt <= '0';
          
          case PS is

              when ST0 =>
                     Z <= "01"; 
                  if(out_rgt = "10000") then
                      NS <= ST1;
                      clear_rgt <= '1';
                  end if;
                  in_rgt <= std_logic_vector(SHIFT_LEFT(unsigned(out_rgt), 1));
                  load_rgt <= '1';

              when ST1 =>
                     Z <= "11"; 
                  if(out_rgt = "00100") then
                      NS <= ST2;
                      clear_rgt <= '1';
                  end if;
                  in_rgt <= std_logic_vector(SHIFT_LEFT(unsigned(out_rgt), 1));
                  load_rgt <= '1';

              when ST2 =>
                     Z <= "10"; 
                  if(out_rgt = "01000") then
                      NS <= ST0;
                      clear_rgt <= '1';
                  end if;
                  in_rgt <= std_logic_vector(SHIFT_LEFT(unsigned(out_rgt), 1));
                  load_rgt <= '1';

          end case;

      end process comb_proc;
end RTL;